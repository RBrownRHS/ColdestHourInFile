import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;
/**
 * Write a description of class ColdestDay here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class ColdestDay {
    public CSVRecord coldestHourInFile (CSVParser parser) {
        CSVRecord coldestSoFar = null;
        for (CSVRecord currentRow : parser) {
            if (coldestSoFar == null) {
                coldestSoFar = currentRow;
            }
            else {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF")); //error
                double smallestTemp = Double.parseDouble(coldestSoFar.get("TemperatureF"));
                if (currentTemp == -9999) {
                    continue;
                }
                if (currentTemp < smallestTemp) {
                    coldestSoFar = currentRow;
                }
            }
        }
        return coldestSoFar;
    }
    public void testColdestHourInFile () {
        FileResource fr = new FileResource("data/2015/weather-2015-01-01");
        CSVRecord coldest = coldestHourInFile(fr.getCSVParser()); //error
        System.out.println("coldest temperature was " + coldest.get("TemperatureF") + " at " + coldest.get("TimeEST"));
    }
    public CSVRecord coldestInManyDays() {
        CSVRecord smallestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        String file = "";
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
            if (smallestSoFar == null) {
                smallestSoFar = currentRow;
                file = f.getAbsolutePath();
            } else
            if (smallestSoFar.equals("-9999")) {
                continue;
            }
            {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
                if (currentTemp < smallestTemp) {
                    smallestSoFar = currentRow;
                    file = f.getAbsolutePath();
                }
            }
        }
        System.out.println(file);
        return smallestSoFar;
    } 
    public void testColdestInManyDays() {
        CSVRecord coldest = coldestInManyDays();
        System.out.println(coldest);
    }
    public CSVRecord lowestHumidityInFile(CSVParser parser) {
        CSVRecord lowestHumiditySoFar = null;
        for (CSVRecord currentRow : parser ) {
            if (lowestHumiditySoFar == null) {
                lowestHumiditySoFar = currentRow;
            }
            else {
                if (currentRow.get("Humidity").equals("N/A")) {
                    continue;
                }
                double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
                double lowestHumidity = Double.parseDouble(lowestHumiditySoFar.get("Humidity"));
                if (currentHumidity < lowestHumidity) {
                    lowestHumiditySoFar = currentRow;
                }
            }
        }
        return lowestHumiditySoFar;
    }
    public void testLowestHumidity() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord lowest = lowestHumidityInFile(parser);
        System.out.println("l9west humidity was " + lowest);
    }
    public CSVRecord hottestHourInFile (CSVParser parser) {
        CSVRecord hottestSoFar = null;
        for (CSVRecord currentRow : parser) {
            if (hottestSoFar == null) {
                hottestSoFar = currentRow;
            }
            else {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(hottestSoFar.get("TemperatureF"));
                if (currentTemp == -9999) {
                    continue;
                }
                if (currentTemp < smallestTemp) {
                    hottestSoFar = currentRow;
                }
            }
        }
        return hottestSoFar;
    }
    public void testHottestHourInFile () {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord hottest = hottestHourInFile(parser);
        System.out.println(hottest);
    }
    public CSVRecord hottestInManyDays() {
        CSVRecord largestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = hottestHourInFile(fr.getCSVParser());
            if (largestSoFar == null) {
                largestSoFar = currentRow;
            } else {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
                if (currentTemp > largestTemp) {
                    largestSoFar = currentRow;
                }
            }
        }
        return largestSoFar;
    }
    public CSVRecord lowestHumidityInManyFiles() {
        CSVRecord lowestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
            if (lowestSoFar == null) {
                lowestSoFar = currentRow;
            }
            else {
                double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
                double lowestHumidity = Double.parseDouble(lowestSoFar.get("Humidity"));
                if (currentHumidity < lowestHumidity) {
                    lowestSoFar = currentRow;
                }
            }
        }
        return lowestSoFar;
    }
    public void testLowestHumidityInManyFiles() {
        CSVRecord lowest = lowestHumidityInManyFiles();
        System.out.println("lowest humidity was " + lowest);
    }
    public double averageTemperatureInFile(CSVParser parser) {
        double averageTemp;
        double sum = 0;
        int counter = 0;
        
        for (CSVRecord record : parser) {
            sum += Double.parseDouble(record.get("TemperatureF")); //error
            counter++;
        }
        averageTemp = sum / counter;
        return averageTemp;
    }
    public void testAverageTemp() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double average = averageTemperatureInFile(parser); //error
        System.out.println(average);
    }
    public static double averageTemperatureWithHighHumidityInFile(CSVParser parser, double level) {
        double averageTemp;
        double sum = 0;
        int counter = 0;
        for (CSVRecord record : parser) {
            double humidity = Double.parseDouble(record.get("Humidity"));
            if (humidity >= level) {
                sum += Double.parseDouble(record.get("TemperatureF"));
                counter++;
            }
        }
        averageTemp = sum / counter;
        return averageTemp;
    }
    public void testAverageTemperatureWithHighHumidityInFile() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double averageTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
        System.out.println("avg temp was " + averageTempHumidity);
    }
}
    
            
